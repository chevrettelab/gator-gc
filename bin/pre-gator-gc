#!/bin/env python

import time
import sys
import os
import glob
import subprocess
import tempfile
import argparse
import logging
import gator_gc.flat
import multiprocessing

from Bio import SeqIO
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
from Bio.SeqFeature import SeqFeature
from Bio.SeqFeature import CompoundLocation
from typing import List, Set, Dict, Optional
from concurrent.futures import ProcessPoolExecutor

## Constants
MODULAR_DOMAINS_HMMDB = os.path.join(os.path.dirname(gator_gc.flat.__file__), 'modular_domains.hmmdb')

GENBANK_EXTENSIONS = [
    '*.gbk',
    '*.gbff',
    '*.gb'
]
VERSION = 'v1.0.0'
DESCRIPTION = """
                                                                                                                                                                     
     -\ ---\--\ -------\ ----\ ---\--\ ---\ --\ ----\ ----\--------\ /---                         
   /--/ ---/--/ -------/ ----/ ---/--/ ---/ --/ ----/ ----/--------/ \----\                                                                    
  ________   _____  __________________  __________         _________________                                                                                
 /  _____/  /  _  \ \__    ___/_____  \ \______   \       /  _____/\_   ___ \                                                                     
/   \  ___ /  /_\  \  |    |   /   |   \ |       _/ _____    \  ___/    \  \/                     
\    \_\  \    |    \ |    |  /    |    \|    |   \/_____/    \_\  \     \_____                   
 \______  /____|__  / |____|  \_______  /|____|_  /       \______  /\_______  /                  
        \/        \/                  \/        \/               \/         \/                                                            
    -----\--\ -------\ ----\ ---\--\ ---\ --\ ------\ ----\---------\ /----                                                               
    \----/--/ -------/ ----/ ---/--/ ---/ --/ ------/ ----/---------/ \----/                                                                       

GATOR-GC: Genomic Assessment Tool for Orthologous Regions and Gene Clusters                                                                               
Developer: José D. D. Cediel-Becerra
Afiliation: Microbiology & Cell Science Deparment, University of Florida                                                                              
Please contact José at jcedielbecerra@ufl.edu if you have any issues                                                                                       
Version: """+VERSION

##testing this for MacOS
if sys.platform == "darwin":  # MacOS
    multiprocessing.set_start_method("spawn", force=True)
elif sys.platform == "linux":
    multiprocessing.set_start_method("fork", force=True)
    
def parse_pre_gator_arguments():
    parser = argparse.ArgumentParser(description=DESCRIPTION, formatter_class=argparse.RawTextHelpFormatter)

    input_group = parser.add_argument_group("Input Options")
    input_group.add_argument(
        '-g',
        type=str,
        nargs='+',
        metavar='',
        help='Directories containing GenBank files (*.gbff/*.gbk/*.gb). '
             'You can specify multiple directories separated by spaces. '
             'Directories can be specified with or without wildcards.',
        required=True
    )
    input_group.add_argument(
        '-b',
        type=int,
        metavar='',
        help='Number of GenBank files to process before writing the protein database (default: process all files at once).',
        required=False
        )

    hmmer_group = parser.add_argument_group("HMMER Options")
    hmmer_group.add_argument(
        '-e',
        type=float,
        default=1e-4,
        metavar='',
        help='E-value threshold for HMMER hmmsearch (default: 1e-4).',
        required=False
    )
    hmmer_group.add_argument(
        '-t',
        type=int,
        default=multiprocessing.cpu_count(),
        metavar='',
        help='Number of CPU threads to use for parsing genome files and for hmmsearch (default: all available threads).',
        required=False
    )

    out_group = parser.add_argument_group("Output Options")
    out_group.add_argument(
        '-o',
        type=str,
        metavar='',
        help='Directory where the gator databases (protein,  DIAMOND, and modular domtblout databases) will be saved.',
        required=True
    )

    parser.add_argument(
        '-v',
        action='store_true',
        default=False,
        help='Enable verbose output (default: False).',
        required=False
    )
    
    return parser.parse_args()

def elapsed_time(
        stime: float
) -> None:
    """                                                                                                                                                                                       
    Time used to process PRE-GATOR-GC.                                                                                                                                                            
                                                                                                                                                                                              
    Args:                                                                                                                                                                                     
        stime (float): Start time of the process.                                                                                                                                             
                                                                                                                                                                                              
    Returns:                                                                                                                                                                                  
        None                                                                                                                                                                                  
    """
    etime = time.time()
    elapsed_time = etime - stime

    if elapsed_time < 60:
        time_unit = "seconds"
        ftime = round(elapsed_time, 2)
    elif elapsed_time < 3600:
        time_unit = "minutes"
        ftime = round(elapsed_time / 60, 2)
    else:
        time_unit = "hours"
        ftime = round(elapsed_time / 3600, 2)
    logging.info(f"Execution time: {ftime} {time_unit}")

stime = time.time()

class CustomFormatter(logging.Formatter):
    def __init__(self, fmt=None, datefmt=None):
        super().__init__(fmt, datefmt)
        self.counter = 0

    def format(self, record):
        self.counter += 1
        record.custom_counter = f"[{self.counter}]"
        return super().format(record)

log_format = '%(custom_counter)s - %(asctime)s - %(levelname)s - %(message)s'
formatter = CustomFormatter(log_format)
handler = logging.StreamHandler()
handler.setFormatter(formatter)
logging.basicConfig(level=logging.INFO, handlers=[handler])

def create_directory(
        directory_name: str,
        verbose: bool = False
) -> None:
    """                                                                                                                                                                                       
    Create a directory to save the GATOR-GC output.                                                                                                                                           
                                                                                                                                                                                              
    Arguments:                                                                                                                                                                                
    directory_name (str): Name of the directory to create.                                                                                                                                    
    verbose (bool): Flag to control verbose logging.                                                                                                                                          
                                                                                                                                                                                              
    Raises:                                                                                                                                                                                   
    ValueError: If the directory name contains invalid characters or is empty.                                                                                                                
    FileExistsError: If the directory already exists.                                                                                                                                         
    OSError: If the directory creation fails due to OS-level error.                                                                                                                           
    """
    if not directory_name:
        logging.error("ERROR: Directory name cannot be empty.")
        raise ValueError("Directory name cannot be empty")

    if '--' in directory_name or any(char in directory_name for char in '<>:"\\|?*'):
        logging.error(f"ERROR: Directory name {directory_name} contains invalid characters.")
        raise ValueError("Invalid directory name")

    if os.path.exists(directory_name):
        logging.error(f"ERROR: Directory {directory_name} already exists")
        raise FileExistsError("Directory already exists")

    try:
        os.mkdir(directory_name)
        if verbose:
            logging.info(f"The {directory_name} directory was created successfully.")
    except OSError as e:
        logging.error(f"ERROR: Failed to create the {directory_name} directory due to OS-level error: {e}")
        raise

def get_list_genomes(
        genomes_dirs: List[str],
        verbose: bool = False
) -> List[str]:
    """                                                                                                                                                                                       
                                                                                                                                                                                              
    Retrieves a list of genome file paths based on provided directory paths and optional wildcard patterns.                                                                                   
    It handles multiple directory inputs and supports wildcard patterns for file matching.                                                                                                    
                                                                                                                                                                                              
    Args:                                                                                                                                                                                     
    genomes_dirs (List[str]): A list containing directory paths which may include wildcards to specify files.                                                                                 
    verbose (bool): Flag to enable logging of detailed execution messages.                                                                                                                    
    Returns:                                                                                                                                                                                  
    List[str]: A list containing the full paths to genome files matching the input patterns. If a directorydoes not contain a wildcard, all genome files in the directory are included based \
on predefined extensions.                                                                                                                                                                     
    """
    genomes_list = []
    for directory in genomes_dirs:
        dir_path, wildcard_pattern = os.path.split(directory)
        if not dir_path:
            dir_path = '.'
        expanded_dirs = glob.glob(dir_path)
        if not expanded_dirs:
            logging.warning(f"No directories found matching: {dir_path}")
        if not wildcard_pattern:
            for expanded_dir in expanded_dirs:
                found_files = False
                for genome_extension in GENBANK_EXTENSIONS:
                    matched_files = glob.glob(os.path.join(expanded_dir, genome_extension))
                    genomes_list.extend(matched_files)
                    if matched_files:
                        found_files = True
                if not found_files:
                    logging.warning(f"No genome files found in: {expanded_dir} with predefined extensions {GENBANK_EXTENSIONS}")
        else:
            for expanded_dir in expanded_dirs:
                matched_files = glob.glob(os.path.join(expanded_dir, wildcard_pattern))
                genomes_list.extend(matched_files)
                if not matched_files:
                    logging.warning(f"No files found matching pattern {wildcard_pattern} in: {expanded_dir}")
                elif verbose:
                    logging.debug(f"Found files matching pattern {wildcard_pattern} in: {expanded_dir}")
    if not genomes_list:
        logging.error("No genome files found matching the provided patterns and directories.")
    if verbose:
        logging.info(f"Total genome files found: {len(genomes_list)}")

    return genomes_list

def replace_dashes_filenames_genomes_dir(
        gfiles: List[str],
        verbose: bool = False
) -> List[str]:
    """
    Replaces double dashes ('--') with underscores ('_') in filenames within the provided list of file paths.
    
    Args:
        gfiles (List[str]): List of genome file paths to be checked and potentially renamed.
        verbose (bool): If True, detailed logging information will be provided.
    
    Returns:
        List[str]: List of updated file paths with double dashes replaced by underscores.
    """
    new_gfiles = []
    for file_path in gfiles:
        directory = os.path.dirname(file_path)
        filename = os.path.basename(file_path)
        if '--' in filename:
            new_filename = filename.replace('--', '_')
            new_filepath = os.path.join(directory, new_filename)
            try:
                os.rename(file_path, new_filepath)
                if verbose:
                    logging.info(f"Renamed file to avoid the '--' string: '{file_path}' to '{new_filepath}'")
            except OSError as e:
                logging.error(f"Error renaming file '{file_path}' to '{new_filepath}': {e}")
                continue
        else:
            new_filepath = file_path
        new_gfiles.append(new_filepath)
    return new_gfiles

def add_trailing_N(
        sequence: str,
        verbose: bool = False
) -> str:
    """Add trailing 'N' characters to make the sequence length a multiple of three.

    Args:
        sequence (str): The DNA sequence to be padded.
        verbose (bool): Flag to enable logging of detailed execution messages.

    Returns:
        str: The padded DNA sequence.
    """
    if len(sequence) % 3 != 0:
        padding_length = 3 - len(sequence) % 3
        sequence += 'N' * padding_length
        if verbose:
            logging.debug(f"Added {padding_length} 'N' characters to sequence to make its length a multiple of three.")
    return sequence

def calculate_translation_for_feature(
        feature: SeqFeature,
        window_record: SeqRecord,
        verbose: bool = False
) -> str:
    """
    Calculates the amino acid translation for a given genomic feature based on its DNA sequence.                                                                                          
  
    Args:                                                                                                                                                                                                         
        feature (SeqFeature): The feature for which to calculate the translation.   
        window_record (SeqRecord): The record from which the feature's sequence will be extracted.
        verbose (bool): Flag to enable logging of detailed execution messages.
                                                                             
    Returns:                                                                                                                                                                                                      
        str: The translated amino acid sequence. If an error occurs during the translation process, logs a warning and returns None.   
    """
    try:
        if isinstance(feature.location, CompoundLocation):
            if verbose:
                logging.debug(f"Translation found in qualifiers for feature at {feature.location}. (CompoundLocation detected).")
            return None

        if 'translation' in feature.qualifiers and feature.qualifiers['translation']:
            translation = feature.qualifiers['translation'][0]
            if translation and len(translation) > 0:
                if verbose:
                    logging.debug(f"Using existing translation for feature at {feature.location}.")
                return translation

        if feature.location.strand == 1:
            seq = str(window_record.seq[feature.location.start:feature.location.end])
        else:
            seq = str(Seq(window_record.seq[feature.location.start:feature.location.end]).reverse_complement())

        seq = add_trailing_N(seq, verbose)
        translated_seq = str(Seq(seq).translate(to_stop=True))

        feature.qualifiers["translation"] = [translated_seq]
        if verbose:
            logging.debug(f"Calculated translation for feature at {feature.location}: {translated_seq}")

        return translated_seq

    except Exception as e:
        logging.warning(f"Error translating feature at {feature.location}: {str(e)}")
        return None

def extract_proteins(file_path: str, verbose: bool = False) -> List[str]:
    """Extracts protein sequences from a single GenBank file."""
    results = []
    seen_contigs = set()
    try:
        genome = os.path.basename(file_path)
        with open(file_path, 'r') as in_fh:
            for rec in SeqIO.parse(in_fh, 'genbank'):
                if rec.id in seen_contigs:
                    logging.error(f"Make sure all contig identifiers are unique in {file_path}. Contig {rec.id} is already used")
                    sys.exit(1)
                seen_contigs.add(rec.id)
                for feat in rec.features:
                    if feat.type == 'CDS':
                        name = get_feature_name(feat, genome, rec.id)
                        seq = calculate_translation_for_feature(feat, rec, verbose)
                        if name and seq:
                            results.append(f'>{name}\n{seq}')
    except Exception as e:
        logging.error(f"Error processing file {file_path}: {e}")
    return results


def get_feature_name(feat, genome: str, rec_id: str) -> str:
    """Generates a unique feature name based on locus_tag or protein_id."""
    if 'locus_tag' in feat.qualifiers:
        return "|-|".join([
            feat.qualifiers['locus_tag'][0] + "|_|" + genome,
            str(int(feat.location.start)),
            str(int(feat.location.end)),
            rec_id
        ])
    elif 'protein_id' in feat.qualifiers:
        return "|-|".join([
            feat.qualifiers['protein_id'][0] + "|_|" + genome,
            str(int(feat.location.start)),
            str(int(feat.location.end)),
            rec_id
        ])
    return None

def write_batch_to_fasta(batch_results: List[str], output_file: str) -> None:
    """Writes a single batch of results to a FASTA file."""
    with open(output_file, 'a') as out_fh:  # Append mode
        out_fh.write('\n'.join(batch_results) + '\n')


def dbfaa_from_gb_dir_parallel(
    genbank_files: List[str],
    db_faa: str,
    verbose: bool = False,
    threads: int = None,
    batch_size: int = None
) -> None:
    """Parses protein sequences from GenBank files in parallel and writes to a FASTA file."""
    try:
        total_files = len(genbank_files)
        batch_size = batch_size or total_files
        processed_files = 0
                
        with ProcessPoolExecutor(max_workers=threads) as executor:
            for batch_start in range(0, total_files, batch_size):
                batch_files = genbank_files[batch_start:batch_start + batch_size]

                # Process the current batch in parallel
                results = executor.map(extract_proteins, batch_files, [verbose] * len(batch_files))

                # Flatten and write the batch results incrementally
                for result in results:
                    if result:
                        write_batch_to_fasta(result, db_faa)

                processed_files += len(batch_files)
                if verbose:
                    progress = (processed_files / total_files) * 100
                    logging.info(f"Processed {processed_files}/{total_files} files ({progress:.2f}% complete)")

        if verbose:
            logging.info(f"Protein database created at {db_faa}")
    except Exception as e:
        logging.error(f"Error during parallel processing: {e}")        
    
def create_diamond_database(
        db_faa: str,
        database_name: str,
        need_return: bool,
        threads: int,
        verbose: bool = False
) -> Optional[str]:
    """                                                                                                                                                                                       
    Creates a DIAMOND database from a provided FASTA file.                                                                                                                                    
                                                                                                                                                                                              
    Args:                                                                                                                                                                                     
        db_faa (str): Path to the input FASTA file containing protein sequences.                                                                                                              
        database_name (str): Name of the DIAMOND database to be created.                                                                                                                      
        need_return (bool): If True, the function returns the name of the database created.                                                                                                   
        threads (int): Number of threads to use for DIAMOND database creation.                                                                                                                
        verbose (bool): Flag to enable logging of detailed execution messages.                                                                                                                
                                                                                                                                                                                              
    Returns:                                                                                                                                                                                  
        Optional[str]: The name of the database if need_return is True, otherwise None.                                                                                                       
                                                                                                                                                                                              
    Raises:                                                                                                                                                                                   
        RuntimeError: If the DIAMOND command fails.                                                                                                                                           
    """
    try:
        command = [
            'diamond', 'makedb',
            '--in', db_faa,
            '--db', database_name,
            '--quiet',
            '--threads', str(threads)
        ]
        subprocess.run(command, check=True)
        if verbose:
            logging.info(f"Successfully created the gator DIAMOND database to {database_name}")

        if need_return:
            return database_name

    except subprocess.CalledProcessError as e:
        logging.error(f"Failed to create DIAMOND database from {db_faa}: {e}")
        raise RuntimeError(f"DIAMOND database creation failed: {e}")

def run_hmmsearch(
        hmmdb: str,
        query: str,
        out: str,
        cpu: int,
        e_value: float,
        verbose: bool = False
) -> None:
    """                                                                                                                                                                                       
    Runs the hmmsearch pipeline to search for modular domain hits in proteins.                                                                                                                
                                                                                                                                                                                              
    Arguments:                                                                                                                                                                                
    hmmdb (str): Path to the HMMs modular domains (nrps, pks) database.                                                                                                                       
    query (str): Path to the query protein file.                                                                                                                                              
    out (str): Output file name for the modular domtblout table.                                                                                                                              
    cpu (int): Number of CPUs allocated for running hmmsearch.                                                                                                                                
    e_value (float): E-value threshold for hmmsearch.                                                                                                                                         
    verbose (bool): Flag to control verbose logging.                                                                                                                                   

    Returns:                                                                                                                                                                                  
    None: This function does not return anything, it executes hmmsearch and writes output to a file.                                                                                          
                                                                                                                                                                                              
    Raises:                                                                                                                                                                                   
    ValueError: If any input argument is invalid.                                                                                                                                             
    RuntimeError: If the hmmsearch command fails.                                                                                                                                             
    """
    if not os.path.isfile(hmmdb):
        raise ValueError(f"HMM database file {hmmdb} does not exist.")
    if not os.path.isfile(query):
        raise ValueError(f"Query protein file {query} does not exist.")
    command = [
        'hmmsearch',
        '--domtblout', out,
        '--cpu', str(cpu),
        '--domE', str(e_value),
        '--noali',
        '-o', '/dev/null',
        hmmdb,
        query
    ]
    try:
        subprocess.run(command, check=True)
        if verbose:
            logging.info(f"Successfully created the gator domtblout database to {out}")
    except subprocess.CalledProcessError as e:
        logging.error(f"hmmsearch failed with error: {e}")
        raise RuntimeError(f"hmmsearch failed: {e}")
    except Exception as e:
        logging.error(f"An unexpected error occurred: {e}")
        raise RuntimeError(f"An unexpected error occurred: {e}")


#################################################################################
#################################################################################
#################################################################################
#################################################################################
#################################################################################
############################# BEGIN MAIN BLOCK ##################################



if __name__ == "__main__":
    ## parse gator arguments
    args = parse_pre_gator_arguments()

    ## print gator to start
    print(DESCRIPTION)

    ## make output directory 
    create_directory(
        args.o,
        verbose=args.v
    )

    ## getting list of genomes
    genomes_list = get_list_genomes(
        args.g,
        verbose=args.v
    )

    ## defining paths
    basename = os.path.basename(args.o)
    output_faa = os.path.join(args.o, f'{basename}.faa')
    output_dmnd = os.path.join(args.o, f'{basename}.dmnd')
    output_domtblout = os.path.join(args.o, f'{basename}.domtblout')

    ## replace dashes in genomes filenames
    new_genomes_list = replace_dashes_filenames_genomes_dir(
        genomes_list,
        verbose=args.v
    )
                      
    ## making pre-gator-gc faa database
    dbfaa_from_gb_dir_parallel(
        new_genomes_list,
        output_faa,
        verbose=args.v,
        threads=args.t,
        batch_size=args.b
    )

    ## making pre-gator-gc diamond database
    create_diamond_database(
        output_faa,
        output_dmnd,
        False,
        args.t,
        verbose=args.v
    )
    
    ## making pre-gator-gc domtblout database
    run_hmmsearch(
        MODULAR_DOMAINS_HMMDB,
        output_faa,
        output_domtblout,
        args.t,
        args.e,
        verbose=args.v
    )
    
    ## elapsed time                                                                                                                                 
    elapsed_time(stime)
